apply plugin: 'scala'

dependencies{
    compile 'org.slf4j:slf4j-api:' + ver.'slf4j-api'
    testCompile "junit:junit:" + ver.junit

    compile "org.scala-lang:scala-library:" + ver.'scala-lib'
    runtime "org.scala-lang:scala-compiler:" + ver.'scala-lib'

    compile "org.apache.kafka:kafka_${ver.scala}:${ver.kafka9}"
}

task setup(type: JavaExec,
           dependsOn: [classes,
                       ":data-generator:shadowJar",
                       ":benchmark-flink:shadowJar",
                       ":benchmark-spark:shadowJar"]) {
    args 'setup'

    // copy versions of packages
    ver.each {
        k,v -> environment[k] = v
    }

    workingDir("../")
    main = 'YauzaSetup'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task test_flink(type: JavaExec, dependsOn: classes) {
    args 'test_flink'

    // copy versions of packages
    ver.each {
        k,v -> environment[k] = v
    }

    workingDir("../")
    main = 'YauzaSetup'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task test_data_prepare(type: JavaExec, dependsOn: classes) {
    args 'test_data_prepare'

    // copy versions of packages
    ver.each {
        k,v -> environment[k] = v
    }

    workingDir("../")
    main = 'YauzaSetup'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task stop_all(type: JavaExec, dependsOn: classes) {
    args 'stop_all'

    // copy versions of packages
    ver.each {
        k,v -> environment[k] = v
    }

    workingDir("../")
    main = 'YauzaSetup'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task repl(type:JavaExec) {
    main = "scala.tools.nsc.MainGenericRunner"
    classpath = sourceSets.main.runtimeClasspath
    standardInput System.in
    args '-usejavacp'
}
